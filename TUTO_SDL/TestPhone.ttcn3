module TestPhone
  {
  // Data types
  type integer PhoneNumberType (1..5)
  
  // The messages
  type record sCall{
    PhoneNumberType param1
    }
  type enumerated sHangUp {e_sHangUp}
  type enumerated sBusy {e_sBusy}
  type enumerated sCallConf {e_sCallConf}
  type enumerated sHangUpConf {e_sHangUpConf}
  type enumerated sReady {e_sReady}
  
  // The ports
  type port cEnvLocal_type message {
    out sCall;
    out sHangUp;
    in sBusy;
    in sCallConf;
    in sHangUpConf
    }
   type port cEnvCentral_type message {
    in sReady
    }
    
   // The SUT - System Under Test
   type component Phone {
    port cEnvLocal_type cEnvLocal;
    port cEnvCentral_type cEnvCentral;
    };
    
   // Templates definitions
   template sReady SystemIsReady := ?;
   template sCallConf CallConf := ?;
   template sBusy Busy := ?;
   template sCall John := {param1 := 2};
   
   // the test cases
   testcase tc_callJohn() runs on Phone
    {
    cEnvCentral.receive(SystemIsReady);
    cEnvLocal.send(John);
    alt
      {
      []cEnvLocal.receive(CallConf)
        {
        setverdict(pass);
        }
       []cEnvLocal.receive(Busy)
        {
        setverdict(fail);
        }
       }
     }
     
    // The control part
    control{
      var verdicttype verdict1;
      verdict1 := execute(tc_callJohn());
    }
  }
  
